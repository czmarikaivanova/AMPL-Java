
		reset;
		option solver '../cplex';
		option cplex_options 'timing 1';
		model ./SatelliteModels/models/sat.mod;
		data ./ampldata/inst-100-5-259.dat;
		
		print '---------------------------------Solving SAT IP';		
		option relax_integrality 0;
	 	option cplex_options 'mipdisplay 2';	
		option cplex_options 'timelimit=1200'; 
		solve;
		printf '%4.2f\t', _solve_elapsed_time >> timelog.txt;
		printf '%2.2f\t', time >> objlog.txt;

#		print '---------------------------------Solving SAT LP';		
#		option relax_integrality 1;
#	 	option cplex_options 'lpdisplay 1';	
#		solve;
#		printf '%4.2f\t', _solve_elapsed_time >> timelog.txt;
#		printf '%2.2f\t', time >> objlog.txt;

		print '---------------------------------Solving PART IP - DAG ';
		option relax_integrality 0;
		reset; 
		model ./SatelliteModels/models/partition-dec.mod;
		data ./ampldata/inst-100-5-259.dat;
		drop followArcs;
		display k;
		for {i in k..n} {
		        reset data;
			data ./ampldata/inst-100-5-259.dat;
		        let k := i;
			option cplex_options 'timelimit=1200'; 
		        solve;
		        if solve_result = 'solved' then {
				printf '%4.2f\t', _solve_elapsed_time >> timelog.txt;
				printf '%2.2f\t', i >> objlog.txt;
				display x;
		                printf 'Optimal value: %d',i;
		                break;
		        }
			printf 'Solve result status number: %d', solve_result_num;
			 if solve_result = 'limit' then {
				printf '%4.2f\t', _solve_elapsed_time >> timelog.txt;
				printf '%2.2f\t', i >> objlog.txt;
		                printf 'Time limit exceeded. Best value found (LB): %d',i;
		                break;
		        }

		        printf 'Infeasible for k = %d',i;
	        }	
		print '---------------------------------Solving PART IP - MARIKA';		
		option relax_integrality 0;
		reset;
		model ./SatelliteModels/models/partition-dec.mod;
		data ./ampldata/inst-100-5-259.dat;
		drop followArcsA;
		drop followArcsB;
		display k;
		for {i in k..n} {
		        reset data;
			data ./ampldata/inst-100-5-259.dat;
		        let k := i;
			option cplex_options 'timelimit=1200'; 
		        solve;
		        if solve_result = 'solved' then {
				printf '%4.2f\n', _solve_elapsed_time >> timelog.txt;
				printf '%2.2f\t', i >> objlog.txt;
				display x;
		                printf 'Optimal value: %d',i;
		                break;
		        }
			printf 'Solve result status number: %d', solve_result_num;
			 if solve_result = 'limit' then {
				printf '%4.2f\n', _solve_elapsed_time >> timelog.txt;
				printf '%2.2f\t', i >> objlog.txt;
		                printf 'Time limit exceeded. Best value found (LB): %d',i;
		                break;
		        }

		        printf 'Infeasible for k = %d',i;
		
		}

                print '---------------------------------Solving MATCHING';
                option relax_integrality 0;
                reset;
                model ./SatelliteModels/models/matching.mod;
                data ./ampldata/inst-100-5-259.dat;
                let k := 2;
		param iterCnt default 0;
                repeat while card(S) < n {
                        let iterCnt := iterCnt + 1;
                        solve;
                        display S;
                        display x;
                        for {j in S} {
                                for {v in V_G} {
                                        if x[2,j,v] == 1 then let S := S union {v};
                                }
                        }
                }
		printf '%2.2f\n', iterCnt >> objlog.txt;
 
	
